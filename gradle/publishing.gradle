task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = GROUP_ID
version = VERSION_NAME

ext["keyId"] = ''
ext["password"] = ''
ext["secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["keyId"] = System.getenv('GPG_KEY')
    ext["password"] = System.getenv('GPG_PASSWORD')
    ext["ossrhUsername"] = System.getenv('SONATYPE_USERNAME')
    ext["ossrhPassword"] = System.getenv('SONATYPE_PASSWORD')
    println(ext['keyId'])
    println(ext['password'])
    println(ext['ossrhUsername'])
    println(ext['ossrhPassword'])
}
def versionString = project.version
versionString = System.getenv('IS_SNAPSHOT') ? versionString + "-SNAPSHOT" : versionString
// println("versionString: ")
// println(versionString)

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId GROUP_ID
            artifactId "MyApplication"
            version VERSION_NAME

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = "My Application"
                description = 'Library to learn publishing to maven central.'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/phan29/MyApplication'
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/license/mit/'
                    }
                }
                developers {
                    developer {
                        id = 'phan29'
                        name = 'Phan Tom'
                        email = 'phan29tom@gmail.com'
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/phan29/MyApplication.git'
                    developerConnection = 'scm:git:ssh://github.com/phan29/MyApplication.git'
                    url = 'https://github.com/phan29/MyApplication/tree/main'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            println("versionString: ")
            println(versionString)
            name = "SonatypeSnapshot"
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            version versionString

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }

        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "MavenCentral"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            version versionString

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    required { keyId != null && password != null }
    useInMemoryPgpKeys(keyId, password)
    sign publishing.publications
}
